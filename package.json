{
  "name": "linter-gfortran",
  "displayName": "Modern Fortran",
  "description": "Fortran language support, syntax highlighting, Language Server support, Debugging, Diagnostics and much more.",
  "version": "3.4.0",
  "publisher": "fortran-lang",
  "license": "MIT",
  "author": {
    "name": "The Fortran Programming Language",
    "url": "https://fortran-lang.org"
  },
  "maintainers": [
    {
      "email": "krvajal.miguelangel@gmail.com",
      "name": "Miguel Carvajal"
    },
    {
      "email": "giannis.nikiteas@gmail.com",
      "name": "Giannis Nikiteas"
    }
  ],
  "engines": {
    "vscode": "^1.67.0"
  },
  "icon": "assets/png/icon.png",
  "homepage": "https://github.com/fortran-lang/vscode-fortran-support#readme",
  "qna": "https://fortran-lang.discourse.group/c/help/vscode/",
  "repository": {
    "type": "git",
    "url": "https://github.com/fortran-lang/vscode-fortran-support.git"
  },
  "keywords": [
    "Fortran",
    "Free Form fortran",
    "Fixed Form fortran",
    "Modern Fortran",
    "IntelliSense",
    "fortls",
    "fpm",
    "IDE"
  ],
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Debuggers",
    "Formatters"
  ],
  "galleryBanner": {
    "color": "#6853ad",
    "theme": "dark"
  },
  "activationEvents": [
    "onLanguage:FortranFreeForm",
    "onLanguage:FortranFixedForm",
    "onCommand:fortran.analysis.restartLanguageServer",
    "onCommand:fortran.analysis.rescanLinter",
    "onCommand:fortran.analysis.cleanLinterDiagnostics",
    "onCommand:fortran.analysis.cleanLinterFiles",
    "onCommand:fortran.analysis.initLinter",
    "onCommand:fortran.analysis.showWhatsNew",
    "onCommand:fortran.build.run",
    "onCommand:fortran.build.debug"
  ],
  "main": "./dist/extension.js",
  "extensionDependencies": [
    "ms-vscode.cpptools"
  ],
  "contributes": {
    "languages": [
      {
        "id": "FortranFreeForm",
        "aliases": [
          "Fortran",
          "Fortran90"
        ],
        "extensions": [
          ".f90",
          ".F90",
          ".f95",
          ".F95",
          ".f03",
          ".F03",
          ".f08",
          ".F08",
          ".f18",
          ".F18",
          ".fpp",
          ".FPP",
          ".pf",
          ".PF",
          ".fypp",
          ".FYPP"
        ],
        "configuration": "./language-configuration.json",
        "icon": {
          "light": "./assets/png/icon.png",
          "dark": "./assets/png/icon.png"
        }
      },
      {
        "id": "FortranFixedForm",
        "aliases": [
          "Fortran77"
        ],
        "extensions": [
          ".f",
          ".F",
          ".f77",
          ".F77",
          ".for",
          ".FOR"
        ],
        "configuration": "./language-configuration.json",
        "icon": {
          "light": "./assets/png/icon.png",
          "dark": "./assets/png/icon.png"
        }
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          ".fortlsrc",
          ".fortls.json",
          ".fortls"
        ],
        "url": "./schemas/fortls.schema.json"
      }
    ],
    "tomlValidation": [
      {
        "fileMatch": "fpm.toml",
        "url": "https://github.com/fortran-lang/fpm-metadata/releases/download/v0.2.1/fpm-metadata-0.2.1.json"
      }
    ],
    "grammars": [
      {
        "language": "FortranFreeForm",
        "scopeName": "source.fortran.free",
        "path": "./syntaxes/fortran_free-form.tmLanguage.json"
      },
      {
        "scopeName": "source.openmp",
        "path": "./syntaxes/openmp_lang.json",
        "injectTo": [
          "source.fortran.free"
        ]
      },
      {
        "scopeName": "source.openacc",
        "path": "./syntaxes/openacc_lang.json",
        "injectTo": [
          "source.fortran.free"
        ]
      },
      {
        "language": "FortranFixedForm",
        "scopeName": "source.fortran.fixed",
        "path": "./syntaxes/fortran_fixed-form.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "FortranFreeForm",
        "path": "./snippets/fortran90.json"
      }
    ],
    "configuration": [
      {
        "id": "general",
        "title": "General",
        "order": 10,
        "properties": {
          "fortran.provide.autocomplete": {
            "type": "string",
            "default": "fortls",
            "enum": [
              "fortls",
              "Built-in",
              "Disabled"
            ],
            "markdownDescription": "Enables code autocompletion, by default it uses `fortls`.",
            "order": 10
          },
          "fortran.provide.hover": {
            "type": "string",
            "default": "fortls",
            "enum": [
              "fortls",
              "Built-in",
              "Both",
              "Disabled"
            ],
            "markdownDescription": "Enables hover support, by default it uses `fortls`.",
            "order": 20
          },
          "fortran.provide.symbols": {
            "type": "string",
            "default": "fortls",
            "enum": [
              "fortls",
              "Both"
            ],
            "markdownDescription": "Outline of modules, functions, subroutines, etc. in the document, by default it uses `fortls`, `Both` will use `fortls` and the `Built-in` functionality (not recommended).",
            "order": 30
          },
          "fortran.preferredCase": {
            "type": "string",
            "default": "lowercase",
            "enum": [
              "lowercase",
              "uppercase"
            ],
            "markdownDescription": "Specify the word case to use when suggesting autocomplete options.",
            "order": 60
          },
          "fortran.logging.level": {
            "type": "string",
            "default": "Info",
            "enum": [
              "None",
              "Error",
              "Warn",
              "Info",
              "Debug"
            ],
            "markdownDescription": "The log level for the extension.",
            "order": 70
          }
        }
      },
      {
        "id": "linting",
        "title": "Linting",
        "order": 20,
        "properties": {
          "fortran.linter.compiler": {
            "type": "string",
            "default": "gfortran",
            "enum": [
              "gfortran",
              "ifort",
              "ifx",
              "nagfor",
              "lfortran",
              "Disabled"
            ],
            "markdownDescription": "Compiler used for linting support.",
            "order": 0
          },
          "fortran.linter.initialize": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Attempt to initialize the linter by mock-compiling all files in the workspace.",
            "order": 5
          },
          "fortran.linter.compilerPath": {
            "type": "string",
            "default": "",
            "markdownDescription": "Specifies the path to the linter executable.",
            "order": 10
          },
          "fortran.linter.includePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Specifies folder paths to be used as include paths during linting. Can resolve glob patterns e.g. `/usr/local/include/**` and internal variables with `~`, `${workspaceFolder}`, `${env}`, `${config}`, `${file}`, `${fileDirname}`, `${fileBasenameNoExtension}`.",
            "order": 20
          },
          "fortran.linter.extraArgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "markdownDescription": "Pass additional options to the linter compiler.  Can resolve internal variables with `~`, `${workspaceFolder}`, `${env}`, `${config}`, `${file}`, `${fileDirname}`, `${fileBasenameNoExtension}`.",
            "order": 30
          },
          "fortran.linter.modOutput": {
            "type": "string",
            "default": "",
            "markdownDescription": "Output directory for .mod files generated due to linting `-J<linter.modOutput>`. By default this is an internal VS Code path unique to each workspace. Can resolve internal variables with `~`, `${workspaceFolder}`, `${env}`, `${config}`, `${file}`, `${fileDirname}`, `${fileBasenameNoExtension}`.",
            "order": 40
          },
          "fortran.linter.fypp.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Use `fypp` to expand preprocessor directives.",
            "order": 50
          },
          "fortran.linter.fypp.path": {
            "type": "string",
            "default": "fypp",
            "markdownDescription": "Path to the `fypp` executable.",
            "order": 60
          },
          "fortran.linter.fypp.definitions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "markdownDescription": "Preprocessor definitions passed to `fypp`.",
            "order": 70
          },
          "fortran.linter.fypp.includes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Include directories passed to `fypp`.",
            "order": 80
          },
          "fortran.linter.fypp.lineNumberingMode": {
            "type": "string",
            "default": "full",
            "enum": [
              "full",
              "nocontlines"
            ],
            "markdownDescription": "line numbering mode, `full` (default): line numbering markers generated whenever source and output lines are out of sync, `nocontlines`: line numbering markers omitted for continuation lines.",
            "order": 110
          },
          "fortran.linter.fypp.lineMarkerFormat": {
            "type": "string",
            "default": "cpp",
            "enum": [
              "cpp",
              "std",
              "gfortran5"
            ],
            "markdownDescription": "Line numbering marker format,  currently std`, `cpp` and `gfortran5` are supported, where `std` emits `#line` pragmas similar to standard tools, 'cpp' produces line directives as emitted by GNU cpp, and `gfortran5` cpp line directives with a workaround for a bug introduced in GFortran 5. Default: `cpp`.",
            "order": 120
          },
          "fortran.linter.fypp.extraArgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Pass additional options to the `fypp` executable.",
            "order": 130
          }
        }
      },
      {
        "id": "formatting",
        "title": "Formatting",
        "order": 30,
        "properties": {
          "fortran.formatting.formatter": {
            "type": "string",
            "default": "findent",
            "enum": [
              "findent",
              "fprettify",
              "Disabled"
            ],
            "markdownDescription": "Fortran formatter, currently supports `findent` and `fprettify`",
            "order": 10
          },
          "fortran.formatting.findentArgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Additional arguments for the `findent` formatter",
            "order": 20
          },
          "fortran.formatting.fprettifyArgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Additional arguments for the `fprettify` formatter",
            "order": 30
          },
          "fortran.formatting.path": {
            "type": "string",
            "default": "",
            "markdownDescription": "If the formatter is not in the `$PATH` specify the full path to its location.",
            "order": 40
          }
        }
      },
      {
        "id": "lsp",
        "title": "Language Server",
        "order": 40,
        "properties": {
          "fortran.fortls.path": {
            "type": "string",
            "default": "fortls",
            "markdownDescription": "Path to the Fortran language server (`fortls`).",
            "order": 10
          },
          "fortran.fortls.configure": {
            "type": "string",
            "default": "",
            "markdownDescription": "Filename holding additional configuration options. For more see: https://fortls.fortran-lang.org/options.html#configuration-using-a-file.",
            "order": 20
          },
          "fortran.fortls.notifyInit": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Notify when workspace initialization is complete.",
            "order": 30
          },
          "fortran.fortls.incrementalSync": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Use incremental synchronization for file changes.",
            "order": 40
          },
          "fortran.fortls.nthreads": {
            "type": "integer",
            "default": 4,
            "markdownDescription": "Number of threads to use during workspace initialization (default: 4).",
            "order": 45
          },
          "fortran.fortls.sortKeywords": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Display variable keywords information when hovering in a sorted, consistent order.",
            "order": 50
          },
          "fortran.fortls.symbolTypes": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Include derived types in the symbols outline. If false it adds the  `--symbol_skip_mem` argument to fortls.",
            "order": 60
          },
          "fortran.fortls.suffixes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Parse additional file extensions to the default (**default**: `F,F77,F90,F95,F03,F08,FOR,FPP` (lower & upper casing)) (**fortls arg: `incl_suffixes`**). For more read the [documentation](https://fortls.fortran-lang.org/options.html#incl-suffixes).",
            "order": 61
          },
          "fortran.fortls.directories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Folders containing source files (**default: `['./**']`**), (**fortls arg: `source_dirs`**). For more read the [documentation](https://fortls.fortran-lang.org/options.html#source-dirs).",
            "order": 62
          },
          "fortran.fortls.excludeSuffixes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Source file extensions to be excluded (**fortls arg: `excl_suffixes`**). For more read the [documentation](https://fortls.fortran-lang.org/options.html#excl-suffixes).",
            "order": 63
          },
          "fortran.fortls.excludeDirectories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Folders to exclude from parsing (**fortls arg: `excl_paths`**). For more read the [documentation](https://fortls.fortran-lang.org/options.html#excl-paths).",
            "order": 64
          },
          "fortran.fortls.preprocessor.suffixes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "File extensions to be parsed **ONLY** for preprocessor commands (**default**: all uppercase source file suffixes) (**fortls arg: `pp_suffixes`**). By default preprocessor definitions are parsed for all Fortran source files with uppercase extensions e.g. `.F90`, `.F`, `.F08`, etc.. However, the default behaviour can be overridden by defining `pp_defs`. For more read the [documentation](https://fortls.fortran-lang.org/options.html#pp-suffixes).",
            "order": 65
          },
          "fortran.fortls.preprocessor.directories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Folders containing preprocessor files with extensions `pp_suffixes` (**fortls arg: `include_dirs`**). Understands Python glob patterns. By default `fortls` will scan the project’s directories for files with extensions `pp_suffixes` to parse for **preprocessor definitions**. However, if the preprocessor files are external to the project, their locations can be specified via `include_dirs`. For more read the [documentation](https://fortls.fortran-lang.org/options.html#include-dirs).",
            "order": 66
          },
          "fortran.fortls.preprocessor.definitions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "markdownDescription": "A dictionary of preprocessor definitions. (**fortls arg: `pp_defs`**). Preprocessor definitions are normally included via `include_dirs`. For more read the [documentation](https://fortls.fortran-lang.org/options.html#pp-defs).",
            "order": 67
          },
          "fortran.fortls.disableDiagnostics": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable additional diagnostics from `fortls` e.g. multiple variable definitions, unknown modules in use statement.",
            "order": 70
          },
          "fortran.fortls.maxLineLength": {
            "type": "number",
            "default": -1,
            "markdownDescription": "Maximum line length. For `gfortran` this also sets the linting compiler flag `-ffree-line-length-<n>` and `-ffixed-line-length-<n>`. Default value is `none`.",
            "order": 90
          },
          "fortran.fortls.maxCommentLineLength": {
            "type": "number",
            "default": -1,
            "markdownDescription": "Maximum comment line length.",
            "order": 100
          },
          "fortran.fortls.extraArgs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "markdownDescription": "Additional arguments for the `fortls`. For more see: https://fortls.fortran-lang.org/options.html#configuration-using-the-command-line",
            "order": 110
          },
          "fortran.fortls.disableAutoupdate": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "fortls will automatically attempt to update itself from PyPi. Set this option if you want to fix your version of fortls. Autoudpate will not occur for Anaconda environments.",
            "order": 120
          },
          "fortran.fortls.disabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable the Language Server. If true, it will limit the extension's functionality substantially. **Should be avoided!**",
            "order": 1300
          }
        }
      },
      {
        "id": "notifications",
        "title": "Notifications",
        "order": 100,
        "properties": {
          "fortran.notifications.releaseNotes": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Show release notes when a new version of the extension is installed.",
            "order": 0
          }
        }
      },
      {
        "id": "experimental",
        "title": "Experimental",
        "order": 500,
        "properties": {
          "fortran.experimental.keepInitDiagnostics": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Keep (and show) all diagnostics generated from the initialization of the Linter, not just from opened files.",
            "order": 0
          }
        }
      },
      {
        "id": "deprecated",
        "title": "Deprecated Options",
        "order": 999,
        "properties": {
          "fortran.includePaths": {
            "deprecationMessage": "fortran.includePaths has been renamed to fortran.linter.includePaths."
          },
          "fortran.gfortranExecutable": {
            "deprecationMessage": "fortran.gfortranExecutable has been renamed to fortran.linter.compilerPath"
          },
          "fortran.linterEnabled": {
            "deprecationMessage": "fortran.linterEnabled has been renamed to fortran.linter.compiler set to Disable to turn off."
          },
          "fortran.linterExtraArgs": {
            "deprecationMessage": "fortran.linterExtraArgs has been renamed to fortran.linter.extraArgs"
          },
          "fortran.linterModOutput": {
            "deprecationMessage": "fortran.linterModOutput has been renamed to fortran.linter.modOutput."
          },
          "fortran.provideSymbols": {
            "deprecationMessage": "fortran.provideSymbols has been renamed to fortran.provide.symbols. By default the fortls symbols are used, to enable the built-in symbols turn on the Built-in option."
          },
          "fortran.symbols": {
            "deprecationMessage": "fortran.symbols has been removed in favour of the fortran language server returning all symbols."
          },
          "fortran.provideHover": {
            "deprecationMessage": "fortran.provideHover has been renamed to fortran.provide.hover. By default the fortls hover is used, to enable the built-in hover turn on the Built-in option."
          },
          "fortran.provideCompletion": {
            "deprecationMessage": "fortran.provideCompletion has been renamed to fortran.provide.autocomplete. By default the fortls autocompletion is used, to enable the built-in autocompletion turn on the Built-in option."
          },
          "fortran.fortls.preserveKeywordOrder": {
            "deprecationMessage": "This option is now the default, use fortran.fortls.sortKeywords to sort keywords."
          }
        }
      }
    ],
    "breakpoints": [
      {
        "language": "FortranFreeForm"
      },
      {
        "language": "FortranFixedForm"
      }
    ],
    "commands": [
      {
        "category": "Fortran",
        "command": "fortran.analysis.restartLanguageServer",
        "title": "Restart the Fortran Language Server"
      },
      {
        "category": "Fortran",
        "command": "fortran.analysis.rescanLinter",
        "title": "Rescan Linter Include paths"
      },
      {
        "category": "Fortran",
        "command": "fortran.analysis.initLinter",
        "title": "Initialize Fortran Linter"
      },
      {
        "category": "Fortran",
        "command": "fortran.analysis.cleanLinterFiles",
        "title": "Clean Linter generated files"
      },
      {
        "category": "Fortran",
        "command": "fortran.analysis.cleanLinterDiagnostics",
        "title": "Clean All Linter Diagnostics"
      },
      {
        "category": "Fortran",
        "command": "fortran.analysis.showWhatsNew",
        "title": "What's New"
      },
      {
        "category": "Fortran",
        "command": "fortran.build.run",
        "icon": "$(play)",
        "title": "Run Fortran File"
      },
      {
        "category": "Fortran",
        "command": "fortran.build.debug",
        "icon": "$(debug-alt)",
        "title": "Debug Fortran File"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "category": "Fortran",
          "command": "fortran.analysis.restartLanguageServer",
          "title": "Restart the Fortran Language Server",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.analysis.rescanLinter",
          "title": "Rescan Linter paths",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.analysis.initLinter",
          "title": "Initialize Fortran Linter",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.analysis.cleanLinterFiles",
          "title": "Clean Linter generated files",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.analysis.cleanLinterDiagnostics",
          "title": "Clean All Linter Diagnostics",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.analysis.showWhatsNew",
          "title": "What's New",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.build.run",
          "icon": "$(play)",
          "title": "Run Fortran File",
          "when": "!virtualWorkspace && shellExecutionSupported"
        },
        {
          "category": "Fortran",
          "command": "fortran.build.debug",
          "icon": "$(debug-alt)",
          "title": "Debug Fortran file",
          "when": "!virtualWorkspace && shellExecutionSupported"
        }
      ],
      "editor/title/run": [
        {
          "command": "fortran.build.run",
          "group": "navigation@0",
          "title": "Run Fortran File",
          "when": "resourceLangId =~ /Fortran/ && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
        },
        {
          "command": "fortran.build.debug",
          "group": "navigation@1",
          "title": "Debug Fortran File",
          "when": "resourceLangId =~ /Fortran/ && !isInDiffEditor && !virtualWorkspace && shellExecutionSupported"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "clean": "npx rimraf dist out coverage .vscode-test",
    "compile": "webpack --mode production",
    "compile-dev": "webpack --mode development",
    "watch": "webpack --mode production --watch --progress",
    "watch-dev": "webpack --mode development --watch --progress",
    "webpack": "webpack --mode production",
    "pretest": "npm run compile-dev && tsc -p tsconfig.test.json",
    "test": "npm run test:unit && npm run test:integration",
    "test:ui": "extest setup-and-run -i out/test/ui/*.js -m test/ui/.mocharc.js -s .vscode-test/ui -e .vscode-test/ui/extensions",
    "test:unit": "node ./out/test/unitTest/runTest.js",
    "test:integration": "node ./out/test/integration/runTest.js",
    "test:grammar-free": "vscode-tmgrammar-snap -s source.fortran.free -g ./syntaxes/fortran_free-form.tmLanguage.json \"./test/fortran/syntax/**/*{.f90,F90}\"",
    "test:grammar-fixed": "vscode-tmgrammar-snap -s source.fortran.fixed -g ./syntaxes/fortran_fixed-form.tmLanguage.json \"./test/fortran/syntax/**/*{.f,F}\"",
    "test:grammar": "npm run test:grammar-free && npm run test:grammar-fixed",
    "test:grammar-update": "npm run test:grammar-free -- -u && npm run test:grammar-fixed -- -u",
    "posttest": "npm run format",
    "lint": "eslint . --ext .ts,.tsx",
    "lint-fix": "npm run lint -- --fix",
    "format": "prettier --write \"src/**/*.{ts,json}\" \"test/**/*.ts\" \"syntaxes/**/*.json\" \"snippets/**/*.json\" \"./**/*.{md,json,yaml,yml}\"",
    "prepare": "husky install",
    "pre-commit": "lint-staged",
    "coverage": "c8 --clean npm run test"
  },
  "devDependencies": {
    "@types/glob": "^8.0.1",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.4.5",
    "@types/semver": "^7.5.8",
    "@types/vscode": "^1.67.0",
    "@types/which": "^3.0.0",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "@vscode/test-electron": "^2.3.9",
    "c8": "^9.1.0",
    "eslint": "^8.56.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-jsdoc": "^48.5.2",
    "eslint-plugin-prettier": "^5.1.3",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.7",
    "mocha": "^10.4.0",
    "prettier": "^3.2.5",
    "ts-loader": "^9.5.1",
    "typescript": "^5.4.5",
    "vscode-extension-tester": "^8.3.0",
    "vscode-tmgrammar-test": "^0.1.3",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4"
  },
  "lint-staged": {
    "*.ts": [
      "npm run format",
      "npm run lint-fix",
      "npm run lint -- --max-warnings=0"
    ]
  },
  "dependencies": {
    "glob": "^10.4.1",
    "semver": "^7.6.2",
    "vscode-languageclient": "^8.1.0",
    "which": "^4.0.0"
  }
}
