{"keyword":"GETARG","docstr":"`GETARG` — Get command line arguments\n\n### Description\nRetrieve the `POS`-th argument that was passed on the\ncommand line when the containing program was invoked.\n\n     \nThis intrinsic routine is provided for backwards compatibility with\nGNU Fortran 77.  In new code, programmers should consider the use of\nthe <a href=\"GET_005fCOMMAND_005fARGUMENT.html#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a> intrinsic defined by the Fortran 2003\nstandard.\n\n\n\n\n### Syntax\n`CALL GETARG(POS, VALUE)`\n\n\n### Arguments\n\n     \n and not wider than\nthe default integer kind; `POS` \\geq 0\n\n | `VALUE`  | Shall be of type `CHARACTER` and of default\nkind. \n\n | `VALUE`  | Shall be of type `CHARACTER`.\n\n\n\n\n\n\n### Return value\nAfter `GETARG` returns, the `VALUE` argument holds the\n`POS`th command line argument. If `VALUE` can not hold the\nargument, it is truncated to fit the length of `VALUE`. If there are\nless than `POS` arguments specified at the command line, `VALUE`\nwill be filled with blanks. If `POS` = 0, `VALUE` is set\nto the name of the program (on systems that support this feature).\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_getarg\n\n  INTEGER :: i\n\n  CHARACTER(len=32) :: arg\n\n\n  DO i = 1, iargc()\n\n    CALL getarg(i, arg)\n\n    WRITE (*,*) arg\n\n  END DO\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine\n\n\n\n### See also\nGNU Fortran 77 compatibility function: <a href=\"IARGC.html#IARGC\">IARGC</a>\n\n     \nFortran 2003 functions and subroutines: <a href=\"GET_005fCOMMAND.html#GET_005fCOMMAND\">GET_COMMAND</a>,\n<a href=\"GET_005fCOMMAND_005fARGUMENT.html#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a>, <a href=\"COMMAND_005fARGUMENT_005fCOUNT.html#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a>\n\n"}