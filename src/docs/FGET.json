{"keyword":"FGET","docstr":"`FGET` — Read a single character in stream mode from stdin\n\n### Description\nRead a single character in stream mode from stdin by bypassing normal\nformatted output. Stream I/O should not be mixed with normal record-oriented\n(formatted or unformatted) I/O on the same unit; the results are unpredictable.\n\n     \nThis intrinsic is provided in both subroutine and function forms; however,\nonly one form can be used in any given program unit.\n\n     \n\nNote that the `FGET` intrinsic is provided for backwards compatibility with\n*g77*.  GNU Fortran provides the Fortran 2003 Stream facility. \nProgrammers should consider the use of new stream IO feature in new code\nfor future portability. See also <a href=\"Fortran-2003-status.html#Fortran-2003-status\">Fortran 2003 status</a>.\n\n\n\n\n### Syntax\n\n     \n\n\n | `STATUS = FGET(C)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n and of default\nkind. \n\n | `STATUS`  | (Optional) status flag of type `INTEGER`. \nReturns 0 on success, -1 on end-of-file, and a system specific positive\nerror code otherwise.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_fget\n\n  INTEGER, PARAMETER :: strlen = 100\n\n  INTEGER :: status, i = 1\n\n  CHARACTER(len=strlen) :: str = \"\"\n\n\n  WRITE (*,*) 'Enter text:'\n\n  DO\n\n    CALL fget(str(i:i), status)\n\n    if (status /= 0 .OR. i &gt; strlen) exit\n\n    i = i + 1\n\n  END DO\n\n  WRITE (*,*) TRIM(str)\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n\n### See also\n<a href=\"FGETC.html#FGETC\">FGETC</a>, <a href=\"FPUT.html#FPUT\">FPUT</a>, <a href=\"FPUTC.html#FPUTC\">FPUTC</a>\n"}