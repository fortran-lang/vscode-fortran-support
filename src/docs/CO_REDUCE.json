{"keyword":"CO_REDUCE","docstr":"`CO_REDUCE` — Reduction of values on the current set of images\n\n### Description\n`CO_REDUCE` determines element-wise the reduction of the value of `A`\non all images of the current team.  The pure function passed as `OPERATOR`\nis used to pairwise reduce the values of `A` by passing either the value\nof `A` of different images or the result values of such a reduction as\nargument.  If `A` is an array, the deduction is done element wise. If\n`RESULT_IMAGE` is present, the result values are returned in `A` on\nthe specified image only and the value of `A` on the other images become\nundefined.  If `RESULT_IMAGE` is not present, the value is returned on all\nimages.  If the execution was successful and `STAT` is present, it is\nassigned the value zero.  If the execution failed, `STAT` gets assigned\na nonzero value and, if present, `ERRMSG` gets assigned a value describing\nthe occurred error.\n\n\n\n### Syntax\n`CALL CO_REDUCE(A, OPERATOR, [, RESULT_IMAGE, STAT, ERRMSG])`\n\n\n### Arguments\n\n     \n argument and shall be\nnonpolymorphic. If it is allocatable, it shall be allocated; if it is a pointer,\nit shall be associated.  `A` shall have the same type and type parameters on\nall images of the team; if it is an array, it shall have the same shape on all\nimages. \n\n | `OPERATOR`      | pure function with two scalar nonallocatable\narguments, which shall be nonpolymorphic and have the same type and type\nparameters as `A`.  The function shall return a nonallocatable scalar of\nthe same type and type parameters as `A`.  The function shall be the same on\nall images and with regards to the arguments mathematically commutative and\nassociative.  Note that `OPERATOR` may not be an elemental function, unless\nit is an intrisic function. \n\n | `RESULT_IMAGE`  | (optional) a scalar integer expression; if\npresent, it shall have the same the same value on all images and refer to an\nimage of the current team. \n\n | `STAT`          | (optional) a scalar integer variable\n\n | `ERRMSG`        | (optional) a scalar character variable\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram test\n\n  integer :: val\n\n  val = this_image ()\n\n  call co_reduce (val, result_image=1, operator=myprod)\n\n  if (this_image() == 1) then\n\n    write(*,*) \"Product value\", val  ! prints num_images() factorial\n\n  end if\n\ncontains\n\n  pure function myprod(a, b)\n\n    integer, value :: a, b\n\n    integer :: myprod\n\n    myprod = a * b\n\n  end function myprod\n\nend program test\n\n```\n\n\n\n### Notes\nWhile the rules permit in principle an intrinsic function, none of the\nintrinsics in the standard fulfill the criteria of having a specific\nfunction, which takes two arguments of the same type and returning that\ntype as result.\n\n\n\n### Standard\nTechnical Specification (TS) 18508 or later\n\n\n\n### Class\nCollective subroutine\n\n\n\n### See also\n<a href=\"CO_005fMIN.html#CO_005fMIN\">CO_MIN</a>, <a href=\"CO_005fMAX.html#CO_005fMAX\">CO_MAX</a>, <a href=\"CO_005fSUM.html#CO_005fSUM\">CO_SUM</a>, <a href=\"CO_005fBROADCAST.html#CO_005fBROADCAST\">CO_BROADCAST</a>\n"}