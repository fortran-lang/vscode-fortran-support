{"keyword":"REAL","docstr":"`REAL` — Convert to real type\n\n### Description\n`REAL(A [, KIND])` converts its argument `A` to a real type.  The\n`REALPART` function is provided for compatibility with *g77*,\nand its use is strongly discouraged.\n\n\n\n### Syntax\n\n     \n\n\n | `RESULT = REALPART(Z)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n, or\n`COMPLEX`. \n\n | `KIND`  | (Optional) An `INTEGER` initialization\nexpression indicating the kind parameter of the result.\n\n\n\n\n\n\n### Return value\nThese functions return a `REAL` variable or array under\nthe following rules:\n\n          <dl>\n**(A)** `REAL(A)` is converted to a default real type if `A` is an\ninteger or real variable. \n\n**(B)** `REAL(A)` is converted to a real type with the kind type parameter\nof `A` if `A` is a complex variable. \n\n**(C)** `REAL(A, KIND)` is converted to a real type with kind type\nparameter `KIND` if `A` is a complex, integer, or real\nvariable. \n\n</dl>\n\n\n\n### Example\n\n     ```\n\n\nprogram test_real\n\n  complex :: x = (1.0, 2.0)\n\n  print *, real(x), real(x,8), realpart(x)\n\nend program test_real\n\n```\n\n\n\n### Specific names\n\n     \n | Name              | Argument            | Return type      | Standard\n\n | `FLOAT(A)`   | `INTEGER(4)`   | `REAL(4)`   | Fortran 77 and later\n\n | `DFLOAT(A)`  | `INTEGER(4)`   | `REAL(8)`   | GNU extension\n\n | `SNGL(A)`    | `INTEGER(8)`   | `REAL(4)`   | Fortran 77 and later\n\n\n\n\n\n\n### Standard\nFortran 77 and later\n\n\n\n### Class\nElemental function\n\n\n\n### See also\n<a href=\"DBLE.html#DBLE\">DBLE</a>\n\n   "}