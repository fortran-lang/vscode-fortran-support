{"keyword":"SYSTEM_CLOCK","docstr":"`SYSTEM_CLOCK` — Time function\n\n### Description\nDetermines the `COUNT` of a processor clock since an unspecified\ntime in the past modulo `COUNT_MAX`, `COUNT_RATE` determines\nthe number of clock ticks per second.  If the platform supports a\nmonotonic clock, that clock is used and can, depending on the platform\nclock implementation, provide up to nanosecond resolution.  If a\nmonotonic clock is not available, the implementation falls back to a\nrealtime clock.\n\n     \n`COUNT_RATE` is system dependent and can vary depending on the kind of\nthe arguments. For `kind=4` arguments (and smaller integer kinds),\n`COUNT` represents milliseconds, while for `kind=8` arguments (and\nlarger integer kinds), `COUNT` typically represents micro- or\nnanoseconds depending on resolution of the underlying platform clock. \n`COUNT_MAX` usually equals `HUGE(COUNT_MAX)`. Note that the\nmillisecond resolution of the `kind=4` version implies that the\n`COUNT` will wrap around in roughly 25 days. In order to avoid issues\nwith the wrap around and for more precise timing, please use the\n`kind=8` version.\n\n     \n\nIf there is no clock, or querying the clock fails, `COUNT` is set\nto `-HUGE(COUNT)`, and `COUNT_RATE` and `COUNT_MAX` are\nset to zero.\n\n     \n\nWhen running on a platform using the GNU C library (glibc) version\n2.16 or older, or a derivative thereof, the high resolution monotonic\nclock is available only when linking with the `rt` library.  This\ncan be done explicitly by adding the `-lrt` flag when linking the\napplication, but is also done implicitly when using OpenMP.\n\n     \n\nOn the Windows platform, the version with `kind=4` arguments uses\nthe `GetTickCount` function, whereas the `kind=8` version\nuses `QueryPerformanceCounter` and\n`QueryPerformanceCounterFrequency`. For more information, and\npotential caveats, please see the platform documentation.\n\n\n\n\n### Syntax\n`CALL SYSTEM_CLOCK([COUNT, COUNT_RATE, COUNT_MAX])`\n\n\n### Arguments\n\n     \n | `COUNT`       | (Optional) shall be a scalar of type\n`INTEGER` with `INTENT(OUT)`. \n\n | `COUNT_RATE`  | (Optional) shall be a scalar of type\n`INTEGER` or `REAL`, with `INTENT(OUT)`. \n\n | `COUNT_MAX`   | (Optional) shall be a scalar of type\n`INTEGER` with `INTENT(OUT)`.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_system_clock\n\n  INTEGER :: count, count_rate, count_max\n\n  CALL SYSTEM_CLOCK(count, count_rate, count_max)\n\n  WRITE(*,*) count, count_rate, count_max\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nSubroutine\n\n\n\n### See also\n<a href=\"DATE_005fAND_005fTIME.html#DATE_005fAND_005fTIME\">DATE_AND_TIME</a>, <a href=\"CPU_005fTIME.html#CPU_005fTIME\">CPU_TIME</a>\n"}