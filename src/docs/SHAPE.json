{"keyword":"SHAPE","docstr":"`SHAPE` — Determine the shape of an array\n\n### Description\nDetermines the shape of an array.\n\n\n\n### Syntax\n`RESULT = SHAPE(SOURCE [, KIND])`\n\n\n### Arguments\n\n     \n | `SOURCE`  | Shall be an array or scalar of any type. \nIf `SOURCE` is a pointer it must be associated and allocatable\narrays must be allocated. \n\n | `KIND`    | (Optional) An `INTEGER` initialization\nexpression indicating the kind parameter of the result.\n\n\n\n\n\n\n### Return value\nAn `INTEGER` array of rank one with as many elements as `SOURCE`\nhas dimensions. The elements of the resulting array correspond to the extend\nof `SOURCE` along the respective dimensions. If `SOURCE` is a scalar,\nthe result is the rank one array of size zero. If `KIND` is absent, the\nreturn value has the default integer kind otherwise the specified kind.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_shape\n\n  INTEGER, DIMENSION(-1:1, -1:2) :: A\n\n  WRITE(*,*) SHAPE(A)             ! (/ 3, 4 /)\n\n  WRITE(*,*) SIZE(SHAPE(42))      ! (/ /)\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later, with `KIND` argument Fortran 2003 and later\n\n\n\n### Class\nInquiry function\n\n\n\n### See also\n<a href=\"RESHAPE.html#RESHAPE\">RESHAPE</a>, <a href=\"SIZE.html#SIZE\">SIZE</a>\n"}