{"keyword":"ALLOCATED","docstr":"`ALLOCATED` — Status of an allocatable entity\n\n### Description\n`ALLOCATED(ARRAY)` and `ALLOCATED(SCALAR)` check the allocation\nstatus of `ARRAY` and `SCALAR`, respectively.\n\n\n\n### Syntax\n\n     \n\n\n | `RESULT = ALLOCATED(SCALAR)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n array. \n\n | `SCALAR`    | The argument shall be an `ALLOCATABLE` scalar.\n\n\n\n\n\n\n### Return value\nThe return value is a scalar `LOGICAL` with the default logical\nkind type parameter.  If the argument is allocated, then the result is\n`.TRUE.`; otherwise, it returns `.FALSE.`\n\n\n### Example\n\n     ```\n\n\nprogram test_allocated\n\n  integer :: i = 4\n\n  real(4), allocatable :: x(:)\n\n  if (.not. allocated(x)) allocate(x(i))\n\nend program test_allocated\n\n```\n\n     \n\n### Standard\nFortran 95 and later.  Note, the `SCALAR=` keyword and allocatable\nscalar entities are available in Fortran 2003 and later.\n\n\n\n### Class\nInquiry function\n\n\n"}