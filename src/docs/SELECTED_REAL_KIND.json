{"keyword":"SELECTED_REAL_KIND","docstr":"`SELECTED_REAL_KIND` — Choose real kind\n\n### Description\n`SELECTED_REAL_KIND(P,R)` returns the kind value of a real data type\nwith decimal precision of at least `P` digits, exponent range of\nat least `R`, and with a radix of `RADIX`.\n\n\n\n### Syntax\n`RESULT = SELECTED_REAL_KIND([P, R, RADIX])`\n\n\n### Arguments\n\n     \n. \n\n | `R`  | (Optional) shall be a scalar and of type `INTEGER`. \n\n | `RADIX`  | (Optional) shall be a scalar and of type `INTEGER`.\n\n\nBefore Fortran 2008, at least one of the arguments `R` or `P` shall\nbe present; since Fortran 2008, they are assumed to be zero if absent.\n\n\n\n\n### Return value\n\n`SELECTED_REAL_KIND` returns the value of the kind type parameter of\na real data type with decimal precision of at least `P` digits, a\ndecimal exponent range of at least `R`, and with the requested\n`RADIX`. If the `RADIX` parameter is absent, real kinds with\nany radix can be returned. If more than one real data type meet the\ncriteria, the kind of the data type with the smallest decimal precision\nis returned. If no real data type matches the criteria, the result is\n          <dl>\n**-1 if the processor does not support a real data type with a** precision greater than or equal to `P`, but the `R` and\n`RADIX` requirements can be fulfilled\n\n**-2 if the processor does not support a real type with an exponent** range greater than or equal to `R`, but `P` and `RADIX`are fulfillable\n\n**-3 if `RADIX` but not `P` and `R` requirements** are fulfillable\n\n**-4 if `RADIX` and either `P` or `R` requirements** are fulfillable\n\n<dt>-5 if there is no real type with the given `RADIX`</dt><dd></dd></dl>\n\n\n\n### Example\n\n     ```\n\n\nprogram real_kinds\n\n  integer,parameter :: p6 = selected_real_kind(6)\n\n  integer,parameter :: p10r100 = selected_real_kind(10,100)\n\n  integer,parameter :: r400 = selected_real_kind(r=400)\n\n  real(kind=p6) :: x\n\n  real(kind=p10r100) :: y\n\n  real(kind=r400) :: z\n\n\n  print *, precision(x), range(x)\n\n  print *, precision(y), range(y)\n\n  print *, precision(z), range(z)\n\nend program real_kinds\n\n```\n\n     \n\n### Standard\nFortran 95 and later, with `RADIX` Fortran 2008 or later\n\n\n\n### Class\nTransformational function\n\n\n\n### See also\n<a href=\"PRECISION.html#PRECISION\">PRECISION</a>, <a href=\"RANGE.html#RANGE\">RANGE</a>, <a href=\"RADIX.html#RADIX\">RADIX</a>\n\n\n"}