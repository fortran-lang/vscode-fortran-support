{"keyword":"ATOMIC_FETCH_AND","docstr":"`ATOMIC_FETCH_AND` — Atomic bitwise AND operation with prior fetch\n\n### Description\n`ATOMIC_AND(ATOM, VALUE)` atomically stores the value of `ATOM` in\n`OLD` and defines `ATOM` with the bitwise AND between the values of\n`ATOM` and `VALUE`. When `STAT` is present and the invokation was\nsuccessful, it is assigned the value 0. If it is present and the invokation has\nfailed, it is assigned a positive value; in particular, for a coindexed\n`ATOM`, if the remote image has stopped, it is assigned the value of\n`ISO_FORTRAN_ENV`'s `STAT_STOPPED_IMAGE` and if the remote image has\nfailed, the value `STAT_FAILED_IMAGE`.\n\n\n\n### Syntax\n`CALL ATOMIC_FETCH_AND (ATOM, VALUE, OLD [, STAT])`\n\n\n### Arguments\n\n     \n | `ATOM`    | Scalar coarray or coindexed variable of integer\ntype with `ATOMIC_INT_KIND` kind. \n\n | `VALUE`   | Scalar of the same type as `ATOM`. If the kind\nis different, the value is converted to the kind of `ATOM`. \n\n | `OLD`     | Scalar of the same type and kind as `ATOM`. \n\n | `STAT`    | (optional) Scalar default-kind integer variable.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram atomic\n\n  use iso_fortran_env\n\n  integer(atomic_int_kind) :: atom[*], old\n\n  call atomic_fetch_and (atom[1], int(b'10100011101'), old)\n\nend program atomic\n\n```\n\n\n\n### Standard\nTS 18508 or later\n\n\n\n### Class\nAtomic subroutine\n\n\n\n### See also\n<a href=\"ATOMIC_005fDEFINE.html#ATOMIC_005fDEFINE\">ATOMIC_DEFINE</a>, <a href=\"ATOMIC_005fAND.html#ATOMIC_005fAND\">ATOMIC_AND</a>, <a href=\"ISO_005fFORTRAN_005fENV.html#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a>,\n<a href=\"ATOMIC_005fFETCH_005fADD.html#ATOMIC_005fFETCH_005fADD\">ATOMIC_FETCH_ADD</a>, <a href=\"ATOMIC_005fFETCH_005fOR.html#ATOMIC_005fFETCH_005fOR\">ATOMIC_FETCH_OR</a>, <a href=\"ATOMIC_005fFETCH_005fXOR.html#ATOMIC_005fFETCH_005fXOR\">ATOMIC_FETCH_XOR</a>\n"}