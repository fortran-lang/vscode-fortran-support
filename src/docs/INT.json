{"keyword":"INT","docstr":"`INT` — Convert to integer type\n\n### Description\nConvert to integer type\n\n\n\n### Syntax\n`RESULT = INT(A [, KIND))`\n\n\n### Arguments\n\n     \n,\n`REAL`, or `COMPLEX`. \n\n | `KIND`  | (Optional) An `INTEGER` initialization\nexpression indicating the kind parameter of the result.\n\n\n\n\n\n\n### Return value\nThese functions return a `INTEGER` variable or array under\nthe following rules:\n\n          <dl>\n**(A)** If `A` is of type `INTEGER`, `INT(A) = A`\n**(B)** If `A` is of type `REAL` and |A| &lt; 1, `INT(A)`equals `0`. If |A| \\geq 1, then `INT(A)` is the integer\nwhose magnitude is the largest integer that does not exceed the magnitude\nof `A` and whose sign is the same as the sign of `A`. \n\n**(C)** If `A` is of type `COMPLEX`, rule B is applied to the real part of `A`. \n\n</dl>\n\n\n\n### Example\n\n     ```\n\n\nprogram test_int\n\n  integer :: i = 42\n\n  complex :: z = (-3.7, 1.0)\n\n  print *, int(i)\n\n  print *, int(z), int(z,8)\n\nend program\n\n```\n\n\n\n### Specific names\n\n     \n | Name             | Argument           | Return type        | Standard\n\n | `INT(A)`    | `REAL(4) A`   | `INTEGER`     | Fortran 77 and later\n\n | `IFIX(A)`   | `REAL(4) A`   | `INTEGER`     | Fortran 77 and later\n\n | `IDINT(A)`  | `REAL(8) A`   | `INTEGER`     | Fortran 77 and later\n\n\n\n   \n\n\n### Standard\nFortran 77 and later\n\n\n\n### Class\nElemental function\n\n\n"}