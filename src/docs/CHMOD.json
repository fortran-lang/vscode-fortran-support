{"keyword":"CHMOD","docstr":"`CHMOD` — Change access permissions of files\n\n### Description\n`CHMOD` changes the permissions of a file.\n\n     \nThis intrinsic is provided in both subroutine and function forms; however,\nonly one form can be used in any given program unit.\n\n\n\n\n### Syntax\n\n     \n\n\n | `STATUS = CHMOD(NAME, MODE)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n\n | `NAME`  | Scalar `CHARACTER` of default kind with the\nfile name. Trailing blanks are ignored unless the character\n`achar(0)` is present, then all characters up to and excluding\n`achar(0)` are used as the file name.\n\n     \n\n\n | `MODE`  | Scalar `CHARACTER` of default kind giving the\nfile permission. `MODE` uses the same syntax as the `chmod` utility\nas defined by the POSIX standard. The argument shall either be a string of\na nonnegative octal number or a symbolic mode.\n\n     \n\n\n | `STATUS`  | (optional) scalar `INTEGER`, which is\n`0` on success and nonzero otherwise.\n\n\n\n\n\n\n### Return value\nIn either syntax, `STATUS` is set to `0` on success and nonzero\notherwise.\n\n\n\n### Example\n`CHMOD` as subroutine\n     ```\n\n\nprogram chmod_test\n\n  implicit none\n\n  integer :: status\n\n  call chmod('test.dat','u+x',status)\n\n  print *, 'Status: ', status\n\nend program chmod_test\n\n```\n\n     \n`CHMOD` as function:\n     \n<pre class=\"smallexample\">          program chmod_test\n            implicit none\n            integer :: status\n            status = chmod('test.dat','u+x')\n            print *, 'Status: ', status\n          end program chmod_test\n</pre>\n     \n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n"}