{"keyword":"SYSTEM","docstr":"`SYSTEM` â€” Execute a shell command\n\n### Description\nPasses the command `COMMAND` to a shell (see `system(3)`). If\nargument `STATUS` is present, it contains the value returned by\n`system(3)`, which is presumably 0 if the shell command succeeded. \nNote that which shell is used to invoke the command is system-dependent\nand environment-dependent.\n\n     \nThis intrinsic is provided in both subroutine and function forms;\nhowever, only one form can be used in any given program unit.\n\n     \n\nNote that the `system` function need not be thread-safe. It is\nthe responsibility of the user to ensure that `system` is not\ncalled concurrently.\n\n\n\n\n### Syntax\n\n     \n\n\n | `STATUS = SYSTEM(COMMAND)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n type. \n\n | `STATUS`   | (Optional) Shall be of default `INTEGER` type.\n\n\n\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n\n### See also\n<a href=\"EXECUTE_005fCOMMAND_005fLINE.html#EXECUTE_005fCOMMAND_005fLINE\">EXECUTE_COMMAND_LINE</a>, which is part of the Fortran 2008 standard\nand should considered in new code for future portability. \n"}