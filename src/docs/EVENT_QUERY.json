{"keyword":"EVENT_QUERY","docstr":"`EVENT_QUERY` — Query whether a coarray event has occurred\n\n### Description\n`EVENT_QUERY` assignes the number of events to `COUNT` which have been\nposted to the `EVENT` variable and not yet been removed by calling\n`EVENT WAIT`. When `STAT` is present and the invokation was successful,\nit is assigned the value 0. If it is present and the invokation has failed,\nit is assigned a positive value and `COUNT` is assigned the value -1.\n\n\n\n### Syntax\n`CALL EVENT_QUERY (EVENT, COUNT [, STAT])`\n\n\n### Arguments\n\n     \n,\ndefined in `ISO_FORTRAN_ENV`; shall not be coindexed. \n\n | `COUNT`   | (intent(out))Scalar integer with at least the\nprecision of default integer. \n\n | `STAT`    | (optional) Scalar default-kind integer variable.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram atomic\n\n  use iso_fortran_env\n\n  implicit none\n\n  type(event_type) :: event_value_has_been_set[*]\n\n  integer :: cnt\n\n  if (this_image() == 1) then\n\n    call event_query (event_value_has_been_set, cnt)\n\n    if (cnt &gt; 0) write(*,*) \"Value has been set\"\n\n  elseif (this_image() == 2) then\n\n    event post (event_value_has_been_set[1])\n\n  end if\n\nend program atomic\n\n```\n\n     \n\n### Standard\nTS 18508 or later\n\n\n\n### Class\n subroutine\n\n\n"}