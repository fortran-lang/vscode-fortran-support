{"keyword":"SIGNAL","docstr":"`SIGNAL` — Signal handling subroutine (or function)\n\n### Description\n`SIGNAL(NUMBER, HANDLER [, STATUS])` causes external subroutine\n`HANDLER` to be executed with a single integer argument when signal\n`NUMBER` occurs.  If `HANDLER` is an integer, it can be used to\nturn off handling of signal `NUMBER` or revert to its default\naction.  See `signal(2)`.\n\n     \nIf `SIGNAL` is called as a subroutine and the `STATUS` argument\nis supplied, it is set to the value returned by `signal(2)`.\n\n\n\n\n### Syntax\n\n     \n\n\n | `STATUS = SIGNAL(NUMBER, HANDLER)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n\n\n | `HANDLER` | Signal handler (`INTEGER FUNCTION` or\n`SUBROUTINE`) or dummy/global `INTEGER` scalar. \n`INTEGER`. It is `INTENT(IN)`. \n\n | `STATUS`  | (Optional) `STATUS` shall be a scalar\ninteger. It has `INTENT(OUT)`.\n\n\n<!-- TODO: What should the interface of the handler be?  Does it take arguments? -->\n\n\n\n\n### Return value\nThe `SIGNAL` function returns the value returned by `signal(2)`.\n\n\n\n### Example\n\n     ```\n\n\nprogram test_signal\n\n  intrinsic signal\n\n  external handler_print\n\n\n  call signal (12, handler_print)\n\n  call signal (10, 1)\n\n\n  call sleep (30)\n\nend program test_signal\n\n```\n\n     \n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n"}