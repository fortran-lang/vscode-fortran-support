{"keyword":"ETIME","docstr":"`ETIME` — Execution time subroutine (or function)\n\n### Description\n`ETIME(VALUES, TIME)` returns the number of seconds of runtime\nsince the start of the process's execution in `TIME`.  `VALUES`\nreturns the user and system components of this time in `VALUES(1)` and\n`VALUES(2)` respectively. `TIME` is equal to `VALUES(1) + VALUES(2)`.\n\n     \nOn some systems, the underlying timings are represented using types with\nsufficiently small limits that overflows (wrap around) are possible, such as\n32-bit types. Therefore, the values returned by this intrinsic might be, or\nbecome, negative, or numerically less than previous values, during a single\nrun of the compiled program.\n\n     \n\nThis intrinsic is provided in both subroutine and function forms; however,\nonly one form can be used in any given program unit.\n\n     \n\n`VALUES` and `TIME` are `INTENT(OUT)` and provide the following:\n\n     \n\n:  | User time in seconds. \n\n | </td><td valign=\"top\" width=\"30%\">`VALUES(2)`:  | System time in seconds. \n\n | </td><td valign=\"top\" width=\"30%\">`TIME`:  | Run time since start in seconds.\n\n\n\n\n\n\n### Syntax\n\n     \n. \n\n | `TIME = ETIME(VALUES)`, (not recommended).\n\n\n\n\n\n\n### Arguments\n\n     \n. \n\n | `TIME` | The type shall be `REAL(4)`.\n\n\n\n\n\n\n### Return value\nElapsed time in seconds since the start of program execution.\n\n\n\n### Example\n\n     ```\n\n\nprogram test_etime\n\n    integer(8) :: i, j\n\n    real, dimension(2) :: tarray\n\n    real :: result\n\n    call ETIME(tarray, result)\n\n    print *, result\n\n    print *, tarray(1)\n\n    print *, tarray(2)\n\n    do i=1,100000000    ! Just a delay\n\n        j = i * i - i\n\n    end do\n\n    call ETIME(tarray, result)\n\n    print *, result\n\n    print *, tarray(1)\n\n    print *, tarray(2)\n\nend program test_etime\n\n```\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n\n### See also\n<a href=\"CPU_005fTIME.html#CPU_005fTIME\">CPU_TIME</a>\n\n   "}