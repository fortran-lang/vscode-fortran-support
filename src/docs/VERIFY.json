{"keyword":"VERIFY","docstr":"`VERIFY` — Scan a string for characters not a given set\n\n### Description\nVerifies that all the characters in `STRING` belong to the set of\ncharacters in `SET`.\n\n     \nIf `BACK` is either absent or equals `FALSE`, this function\nreturns the position of the leftmost character of `STRING` that is\nnot in `SET`. If `BACK` equals `TRUE`, the rightmost\nposition is returned. If all characters of `STRING` are found in\n`SET`, the result is zero.\n\n\n\n\n### Syntax\n`RESULT = VERIFY(STRING, SET[, BACK [, KIND]])`\n\n\n### Arguments\n\n     \n. \n\n | `SET`     | Shall be of type `CHARACTER`. \n\n | `BACK`    | (Optional) shall be of type `LOGICAL`. \n\n | `KIND`    | (Optional) An `INTEGER` initialization\nexpression indicating the kind parameter of the result.\n\n\n\n\n\n\n### Return value\nThe return value is of type `INTEGER` and of kind `KIND`. If\n`KIND` is absent, the return value is of default integer kind.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_verify\n\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"AO\")           ! 1, found 'F'\n\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FOO\")          ! 3, found 'R'\n\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\")          ! 1, found 'F'\n\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\", .TRUE.)  ! 7, found 'N'\n\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FORTRAN\")      ! 0' found none\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later, with `KIND` argument Fortran 2003 and later\n\n\n\n### Class\nElemental function\n\n\n\n### See also\n<a href=\"SCAN.html#SCAN\">SCAN</a>, <a href=\"INDEX-intrinsic.html#INDEX-intrinsic\">INDEX intrinsic</a>\n"}