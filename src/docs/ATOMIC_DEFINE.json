{"keyword":"ATOMIC_DEFINE","docstr":"`ATOMIC_DEFINE` — Setting a variable atomically\n\n### Description\n`ATOMIC_DEFINE(ATOM, VALUE)` defines the variable `ATOM` with the value\n`VALUE` atomically. When `STAT` is present and the invokation was\nsuccessful, it is assigned the value 0. If it is present and the invokation\nhas failed, it is assigned a positive value; in particular, for a coindexed\n`ATOM`, if the remote image has stopped, it is assigned the value of\n`ISO_FORTRAN_ENV`'s `STAT_STOPPED_IMAGE` and if the remote image has\nfailed, the value `STAT_FAILED_IMAGE`.\n\n\n\n### Syntax\n`CALL ATOMIC_DEFINE (ATOM, VALUE [, STAT])`\n\n\n### Arguments\n\n     \n | `ATOM`    | Scalar coarray or coindexed variable of either integer\ntype with `ATOMIC_INT_KIND` kind or logical type with\n`ATOMIC_LOGICAL_KIND` kind.\n\n     \n\n\n | `VALUE`   | Scalar of the same type as `ATOM`. If the kind\nis different, the value is converted to the kind of `ATOM`. \n\n | `STAT`    | (optional) Scalar default-kind integer variable.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram atomic\n\n  use iso_fortran_env\n\n  integer(atomic_int_kind) :: atom[*]\n\n  call atomic_define (atom[1], this_image())\n\nend program atomic\n\n```\n\n\n\n### Standard\nFortran 2008 and later; with `STAT`, TS 18508 or later\n\n\n\n### Class\nAtomic subroutine\n\n\n\n### See also\n<a href=\"ATOMIC_005fREF.html#ATOMIC_005fREF\">ATOMIC_REF</a>, <a href=\"ATOMIC_005fCAS.html#ATOMIC_005fCAS\">ATOMIC_CAS</a>, <a href=\"ISO_005fFORTRAN_005fENV.html#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a>,\n<a href=\"ATOMIC_005fADD.html#ATOMIC_005fADD\">ATOMIC_ADD</a>, <a href=\"ATOMIC_005fAND.html#ATOMIC_005fAND\">ATOMIC_AND</a>, <a href=\"ATOMIC_005fOR.html#ATOMIC_005fOR\">ATOMIC_OR</a>, <a href=\"ATOMIC_005fXOR.html#ATOMIC_005fXOR\">ATOMIC_XOR</a>\n"}