{"keyword":"IRAND","docstr":"`IRAND` — Integer pseudo-random number\n\n### Description\n`IRAND(FLAG)` returns a pseudo-random number from a uniform\ndistribution between 0 and a system-dependent limit (which is in most\ncases 2147483647). If `FLAG` is 0, the next number\nin the current sequence is returned; if `FLAG` is 1, the generator\nis restarted by `CALL SRAND(0)`; if `FLAG` has any other value,\nit is used as a new seed with `SRAND`.\n\n     \nThis intrinsic routine is provided for backwards compatibility with\nGNU Fortran 77. It implements a simple modulo generator as provided\nby *g77*. For new code, one should consider the use of\n<a href=\"RANDOM_005fNUMBER.html#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> as it implements a superior algorithm.\n\n\n\n\n### Syntax\n`RESULT = IRAND(I)`\n\n\n### Arguments\n\n     \n of kind 4.\n\n\n\n\n\n\n### Return value\nThe return value is of `INTEGER(kind=4)` type.\n\n\n\n### Example\n\n     ```\n\n\nprogram test_irand\n\n  integer,parameter :: seed = 86456\n\n\n  call srand(seed)\n\n  print *, irand(), irand(), irand(), irand()\n\n  print *, irand(seed), irand(), irand(), irand()\n\nend program test_irand\n\n```\n\n     \n\n### Standard\nGNU extension\n\n\n\n### Class\nFunction\n\n\n"}