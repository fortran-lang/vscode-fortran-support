{"keyword":"UNPACK","docstr":"`UNPACK` — Unpack an array of rank one into an array\n\n### Description\nStore the elements of `VECTOR` in an array of higher rank.\n\n\n\n### Syntax\n`RESULT = UNPACK(VECTOR, MASK, FIELD)`\n\n\n### Arguments\n\n     \n | `VECTOR`  | Shall be an array of any type and rank one. It\nshall have at least as many elements as `MASK` has `TRUE` values. \n\n | `MASK`    | Shall be an array of type `LOGICAL`. \n\n | `FIELD`   | Shall be of the same type as `VECTOR` and have\nthe same shape as `MASK`.\n\n\n\n\n\n\n### Return value\nThe resulting array corresponds to `FIELD` with `TRUE` elements\nof `MASK` replaced by values from `VECTOR` in array element order.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_unpack\n\n  integer :: vector(2)  = (/1,1/)\n\n  logical :: mask(4)  = (/ .TRUE., .FALSE., .FALSE., .TRUE. /)\n\n  integer :: field(2,2) = 0, unity(2,2)\n\n\n  ! result: unity matrix\n\n  unity = unpack(vector, reshape(mask, (/2,2/)), field)\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nTransformational function\n\n\n\n### See also\n<a href=\"PACK.html#PACK\">PACK</a>, <a href=\"SPREAD.html#SPREAD\">SPREAD</a>\n"}