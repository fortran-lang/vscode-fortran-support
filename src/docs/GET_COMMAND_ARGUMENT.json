{"keyword":"GET_COMMAND_ARGUMENT","docstr":"`GET_COMMAND_ARGUMENT` — Get command line arguments\n\n### Description\nRetrieve the `NUMBER`-th argument that was passed on the\ncommand line when the containing program was invoked.\n\n\n\n### Syntax\n`CALL GET_COMMAND_ARGUMENT(NUMBER [, VALUE, LENGTH, STATUS])`\n\n\n### Arguments\n\n     \n and of\ndefault kind, `NUMBER` \\geq 0\n\n | `VALUE`   | (Optional) Shall be a scalar of type `CHARACTER`and of default kind. \n\n | `LENGTH`  | (Optional) Shall be a scalar of type `INTEGER`and of default kind. \n\n | `STATUS`  | (Optional) Shall be a scalar of type `INTEGER`and of default kind.\n\n\n\n\n\n\n### Return value\nAfter `GET_COMMAND_ARGUMENT` returns, the `VALUE` argument holds the\n`NUMBER`-th command line argument. If `VALUE` can not hold the argument, it is\ntruncated to fit the length of `VALUE`. If there are less than `NUMBER`\narguments specified at the command line, `VALUE` will be filled with blanks. \nIf `NUMBER` = 0, `VALUE` is set to the name of the program (on\nsystems that support this feature). The `LENGTH` argument contains the\nlength of the `NUMBER`-th command line argument. If the argument retrieval\nfails, `STATUS` is a positive number; if `VALUE` contains a truncated\ncommand line argument, `STATUS` is -1; and otherwise the `STATUS` is\nzero.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_get_command_argument\n\n  INTEGER :: i\n\n  CHARACTER(len=32) :: arg\n\n\n  i = 0\n\n  DO\n\n    CALL get_command_argument(i, arg)\n\n    IF (LEN_TRIM(arg) == 0) EXIT\n\n\n    WRITE (*,*) TRIM(arg)\n\n    i = i+1\n\n  END DO\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 2003 and later\n\n\n\n### Class\nSubroutine\n\n\n\n### See also\n<a href=\"GET_005fCOMMAND.html#GET_005fCOMMAND\">GET_COMMAND</a>, <a href=\"COMMAND_005fARGUMENT_005fCOUNT.html#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a>\n"}