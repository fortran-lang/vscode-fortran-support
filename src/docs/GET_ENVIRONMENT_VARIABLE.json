{"keyword":"GET_ENVIRONMENT_VARIABLE","docstr":"`GET_ENVIRONMENT_VARIABLE` — Get an environmental variable\n\n### Description\nGet the `VALUE` of the environmental variable `NAME`.\n\n     \nNote that `GET_ENVIRONMENT_VARIABLE` need not be thread-safe. It\nis the responsibility of the user to ensure that the environment is\nnot being updated concurrently with a call to the\n`GET_ENVIRONMENT_VARIABLE` intrinsic.\n\n\n\n\n### Syntax\n`CALL GET_ENVIRONMENT_VARIABLE(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME)`\n\n\n### Arguments\n\n     \n\nand of default kind. \n\n | `VALUE`      | (Optional) Shall be a scalar of type `CHARACTER`and of default kind. \n\n | `LENGTH`     | (Optional) Shall be a scalar of type `INTEGER`and of default kind. \n\n | `STATUS`     | (Optional) Shall be a scalar of type `INTEGER`and of default kind. \n\n | `TRIM_NAME`  | (Optional) Shall be a scalar of type `LOGICAL`and of default kind.\n\n\n\n\n\n\n### Return value\nStores the value of `NAME` in `VALUE`. If `VALUE` is\nnot large enough to hold the data, it is truncated. If `NAME`\nis not set, `VALUE` will be filled with blanks. Argument `LENGTH`\ncontains the length needed for storing the environment variable `NAME`\nor zero if it is not present. `STATUS` is -1 if `VALUE` is present\nbut too short for the environment variable; it is 1 if the environment\nvariable does not exist and 2 if the processor does not support environment\nvariables; in all other cases `STATUS` is zero. If `TRIM_NAME` is\npresent with the value `.FALSE.`, the trailing blanks in `NAME`\nare significant; otherwise they are not part of the environment variable\nname.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_getenv\n\n  CHARACTER(len=255) :: homedir\n\n  CALL get_environment_variable(\"HOME\", homedir)\n\n  WRITE (*,*) TRIM(homedir)\n\nEND PROGRAM\n\n```\n\n     \n\n### Standard\nFortran 2003 and later\n\n\n\n### Class\nSubroutine\n\n\n"}