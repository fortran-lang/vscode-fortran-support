{"keyword":"ASSOCIATED","docstr":"`ASSOCIATED` — Status of a pointer or pointer/target pair\n\n### Description\n`ASSOCIATED(POINTER [, TARGET])` determines the status of the pointer\n`POINTER` or if `POINTER` is associated with the target `TARGET`.\n\n\n\n### Syntax\n`RESULT = ASSOCIATED(POINTER [, TARGET])`\n\n\n### Arguments\n\n     \n attribute\nand it can be of any type. \n\n | `TARGET`  | (Optional) `TARGET` shall be a pointer or\na target.  It must have the same type, kind type parameter, and\narray rank as `POINTER`.\n\n\nThe association status of neither `POINTER` nor `TARGET` shall be\nundefined.\n\n\n\n\n### Return value\n`ASSOCIATED(POINTER)` returns a scalar value of type `LOGICAL(4)`. \nThere are several cases:\n          <dl>\n**(A) When the optional `TARGET` is not present then** `ASSOCIATED(POINTER)` is true if `POINTER` is associated with a target; otherwise, it returns false. \n\n**(B) If `TARGET` is present and a scalar target, the result is true if** `TARGET` is not a zero-sized storage sequence and the target associated with `POINTER` occupies the same storage units.  If `POINTER` is\ndisassociated, the result is false. \n\n**(C) If `TARGET` is present and an array target, the result is true if** `TARGET` and `POINTER` have the same shape, are not zero-sized arrays,\nare arrays whose elements are not zero-sized storage sequences, and\n`TARGET` and `POINTER` occupy the same storage units in array element\norder. \nAs in case(B), the result is false, if `POINTER` is disassociated. \n\n**(D) If `TARGET` is present and an scalar pointer, the result is true** if `TARGET` is associated with `POINTER`, the target associated with\n`TARGET` are not zero-sized storage sequences and occupy the same storage\nunits. \nThe result is false, if either `TARGET` or `POINTER` is disassociated. \n\n**(E) If `TARGET` is present and an array pointer, the result is true if** target associated with `POINTER` and the target associated with `TARGET`\nhave the same shape, are not zero-sized arrays, are arrays whose elements are\nnot zero-sized storage sequences, and `TARGET` and `POINTER` occupy\nthe same storage units in array element order. \nThe result is false, if either `TARGET` or `POINTER` is disassociated. \n\n</dl>\n\n\n\n### Example\n\n     ```\n\n\nprogram test_associated\n\n   implicit none\n\n   real, target  :: tgt(2) = (/1., 2./)\n\n   real, pointer :: ptr(:)\n\n   ptr =&gt; tgt\n\n   if (associated(ptr)     .eqv. .false.) call abort\n\n   if (associated(ptr,tgt) .eqv. .false.) call abort\n\nend program test_associated\n\n```\n\n\n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nInquiry function\n\n\n\n### See also\n<a href=\"NULL.html#NULL\">NULL</a>\n"}