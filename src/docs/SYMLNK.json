{"keyword":"SYMLNK","docstr":"`SYMLNK` â€” Create a symbolic link\n\n### Description\nMakes a symbolic link from file `PATH1` to `PATH2`. A null\ncharacter (`CHAR(0)`) can be used to mark the end of the names in\n`PATH1` and `PATH2`; otherwise, trailing blanks in the file\nnames are ignored.  If the `STATUS` argument is supplied, it\ncontains 0 on success or a nonzero error code upon return; see\n`symlink(2)`.  If the system does not supply `symlink(2)`,\n`ENOSYS` is returned.\n\n     \nThis intrinsic is provided in both subroutine and function forms;\nhowever, only one form can be used in any given program unit.\n\n\n\n\n### Syntax\n\n     \n\n\n | `STATUS = SYMLNK(PATH1, PATH2)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n type. \n\n | `PATH2`  | Shall be of default `CHARACTER` type. \n\n | `STATUS`  | (Optional) Shall be of default `INTEGER` type.\n\n\n\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine, function\n\n\n\n### See also\n<a href=\"LINK.html#LINK\">LINK</a>, <a href=\"UNLINK.html#UNLINK\">UNLINK</a>\n\n   "}