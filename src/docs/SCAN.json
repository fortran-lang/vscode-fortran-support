{"keyword":"SCAN","docstr":"`SCAN` — Scan a string for the presence of a set of characters\n\n### Description\nScans a `STRING` for any of the characters in a `SET`\nof characters.\n\n     \nIf `BACK` is either absent or equals `FALSE`, this function\nreturns the position of the leftmost character of `STRING` that is\nin `SET`. If `BACK` equals `TRUE`, the rightmost position\nis returned. If no character of `SET` is found in `STRING`, the\nresult is zero.\n\n\n\n\n### Syntax\n`RESULT = SCAN(STRING, SET[, BACK [, KIND]])`\n\n\n### Arguments\n\n     \n. \n\n | `SET`     | Shall be of type `CHARACTER`. \n\n | `BACK`    | (Optional) shall be of type `LOGICAL`. \n\n | `KIND`    | (Optional) An `INTEGER` initialization\nexpression indicating the kind parameter of the result.\n\n\n\n\n\n\n### Return value\nThe return value is of type `INTEGER` and of kind `KIND`. If\n`KIND` is absent, the return value is of default integer kind.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_scan\n\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\")          ! 2, found 'O'\n\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\", .TRUE.)  ! 6, found 'A'\n\n  WRITE(*,*) SCAN(\"FORTRAN\", \"C++\")         ! 0, found none\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later, with `KIND` argument Fortran 2003 and later\n\n\n\n### Class\nElemental function\n\n\n\n### See also\n<a href=\"INDEX-intrinsic.html#INDEX-intrinsic\">INDEX intrinsic</a>, <a href=\"VERIFY.html#VERIFY\">VERIFY</a>\n"}