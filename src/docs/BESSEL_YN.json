{"keyword":"BESSEL_YN","docstr":"`BESSEL_YN` — Bessel function of the second kind\n\n### Description\n`BESSEL_YN(N, X)` computes the Bessel function of the second kind of\norder `N` of `X`. This function is available under the name\n`BESYN` as a GNU extension.  If `N` and `X` are arrays,\ntheir ranks and shapes shall conform.\n\n     \n`BESSEL_YN(N1, N2, X)` returns an array with the Bessel functions\nof the first kind of the orders `N1` to `N2`.\n\n\n\n\n### Syntax\n\n     \n\n\n | `RESULT = BESSEL_YN(N1, N2, X)`     <br>\n\n\n\n\n\n### Arguments\n\n     \n . \n\n | `N1`  | Shall be a non-negative scalar of type  `INTEGER`. \n\n | `N2`  | Shall be a non-negative scalar of type  `INTEGER`. \n\n | `X`  | Shall be a scalar or an array of type  `REAL`;\nfor `BESSEL_YN(N1, N2, X)` it shall be scalar.\n\n\n\n\n\n\n### Return value\nThe return value is a scalar of type `REAL`. It has the same\nkind as `X`.\n\n\n\n### Example\n\n     ```\n\n\nprogram test_besyn\n\n  real(8) :: x = 1.0_8\n\n  x = bessel_yn(5,x)\n\nend program test_besyn\n\n```\n\n\n\n### Specific names\n\n     \n | Name                | Argument             | Return type      | Standard\n\n | `DBESYN(N,X)`  | `INTEGER N`  | `REAL(8)`   | GNU extension\n\n | </td><td valign=\"top\" width=\"20%\">`REAL(8) X`  | </td><td valign=\"top\" width=\"25%\">\n\n\n\n\n\n### Notes\nThe transformational function uses a recurrence algorithm which might,\nfor some values of `X`, lead to different results than calls to\nthe elemental function.\n\n\n\n### Standard\nFortran 2008 and later, negative `N` is allowed as GNU extension\n\n\n\n### Class\nElemental function, except for the transformational function\n`BESSEL_YN(N1, N2, X)`\n\n"}