{"keyword":"C_LOC","docstr":"`C_LOC` — Obtain the C address of an object\n\n### Description\n`C_LOC(X)` determines the C address of the argument.\n\n\n\n### Syntax\n`RESULT = C_LOC(X)`\n\n\n### Arguments\n\n     \n | `X`  | Shall have either the POINTER or TARGET attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters.\n\n\n\n\n\n\n\n### Return value\nThe return value is of type `C_PTR` and contains the C address\nof the argument.\n\n\n\n### Example\n\n     ```\n\n\nsubroutine association_test(a,b)\n\n  use iso_c_binding, only: c_associated, c_loc, c_ptr\n\n  implicit none\n\n  real, pointer :: a\n\n  type(c_ptr) :: b\n\n  if(c_associated(b, c_loc(a))) &amp;\n\n     stop 'b and a do not point to same target'\n\nend subroutine association_test\n\n```\n\n\n\n### Standard\nFortran 2003 and later\n\n\n\n### Class\nInquiry function\n\n\n\n### See also\n<a href=\"C_005fASSOCIATED.html#C_005fASSOCIATED\">C_ASSOCIATED</a>, <a href=\"C_005fFUNLOC.html#C_005fFUNLOC\">C_FUNLOC</a>, <a href=\"C_005fF_005fPOINTER.html#C_005fF_005fPOINTER\">C_F_POINTER</a>, <a href=\"C_005fF_005fPROCPOINTER.html#C_005fF_005fPROCPOINTER\">C_F_PROCPOINTER</a>\n"}