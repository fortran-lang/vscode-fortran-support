{"keyword":"RANDOM_NUMBER","docstr":"`RANDOM_NUMBER` — Pseudo-random number\n\n### Description\nReturns a single pseudorandom number or an array of pseudorandom numbers\nfrom the uniform distribution over the range  0 \\leq x &lt; 1.\n\n     \nThe runtime-library implements George Marsaglia's KISS (Keep It Simple\nStupid) random number generator (RNG). This RNG combines:\n          \n<ol start=\"1\" type=\"1\">\n<li>The congruential generator x(n) = 69069 \\cdot x(n-1) + 1327217885\nwith a period of 2^32,\n</li><li>A 3-shift shift-register generator with a period of 2^32 - 1,\n</li><li>Two 16-bit multiply-with-carry generators with a period of\n597273182964842497 &gt; 2^59.\n          </li></ol>\nThe overall period exceeds 2^123.\n\n     \nPlease note, this RNG is thread safe if used within OpenMP directives,\ni.e., its state will be consistent while called from multiple threads. \nHowever, the KISS generator does not create random numbers in parallel\nfrom multiple sources, but in sequence from a single source. If an\nOpenMP-enabled application heavily relies on random numbers, one should\nconsider employing a dedicated parallel random number generator instead.\n\n\n\n\n### Syntax\n`RANDOM_NUMBER(HARVEST)`\n\n\n### Arguments\n\n     \n.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram test_random_number\n\n  REAL :: r(5,5)\n\n  CALL init_random_seed()         ! see example of RANDOM_SEED\n\n  CALL RANDOM_NUMBER(r)\n\nend program\n\n```\n\n\n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nSubroutine\n\n\n\n### See also\n<a href=\"RANDOM_005fSEED.html#RANDOM_005fSEED\">RANDOM_SEED</a>\n"}