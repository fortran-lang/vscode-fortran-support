{"keyword":"EXECUTE_COMMAND_LINE","docstr":"`EXECUTE_COMMAND_LINE` — Execute a shell command\n\n### Description\n`EXECUTE_COMMAND_LINE` runs a shell command, synchronously or\nasynchronously.\n\n     \nThe `COMMAND` argument is passed to the shell and executed, using\nthe C library's `system` call.  (The shell is `sh` on Unix\nsystems, and `cmd.exe` on Windows.)  If `WAIT` is present\nand has the value false, the execution of the command is asynchronous\nif the system supports it; otherwise, the command is executed\nsynchronously.\n\n     \n\nThe three last arguments allow the user to get status information.  After\nsynchronous execution, `EXITSTAT` contains the integer exit code of\nthe command, as returned by `system`.  `CMDSTAT` is set to zero\nif the command line was executed (whatever its exit status was). \n`CMDMSG` is assigned an error message if an error has occurred.\n\n     \n\nNote that the `system` function need not be thread-safe. It is\nthe responsibility of the user to ensure that `system` is not\ncalled concurrently.\n\n\n\n\n### Syntax\n`CALL EXECUTE_COMMAND_LINE(COMMAND [, WAIT, EXITSTAT, CMDSTAT, CMDMSG ])`\n\n\n### Arguments\n\n     \n scalar. \n\n | `WAIT`  | (Optional) Shall be a default `LOGICAL` scalar. \n\n | `EXITSTAT`  | (Optional) Shall be an `INTEGER` of the\ndefault kind. \n\n | `CMDSTAT`  | (Optional) Shall be an `INTEGER` of the\ndefault kind. \n\n | `CMDMSG`  | (Optional) Shall be an `CHARACTER` scalar of the\ndefault kind.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram test_exec\n\n  integer :: i\n\n\n  call execute_command_line (\"external_prog.exe\", exitstat=i)\n\n  print *, \"Exit status of external_prog.exe was \", i\n\n\n  call execute_command_line (\"reindex_files.exe\", wait=.false.)\n\n  print *, \"Now reindexing files in the background\"\n\n\nend program test_exec\n\n```\n\n\n\n### Notes\n\nBecause this intrinsic is implemented in terms of the `system`function call, its behavior with respect to signaling is processor\ndependent. In particular, on POSIX-compliant systems, the SIGINT and\nSIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As\nsuch, if the parent process is terminated, the child process might not be\nterminated alongside.\n\n\n\n### Standard\nFortran 2008 and later\n\n\n\n### Class\nSubroutine\n\n\n\n### See also\n<a href=\"SYSTEM.html#SYSTEM\">SYSTEM</a>\n"}