{"keyword":"RESHAPE","docstr":"`RESHAPE` — Function to reshape an array\n\n### Description\nReshapes `SOURCE` to correspond to `SHAPE`. If necessary,\nthe new array may be padded with elements from `PAD` or permuted\nas defined by `ORDER`.\n\n\n\n### Syntax\n`RESULT = RESHAPE(SOURCE, SHAPE[, PAD, ORDER])`\n\n\n### Arguments\n\n     \n | `SOURCE`  | Shall be an array of any type. \n\n | `SHAPE`   | Shall be of type `INTEGER` and an\narray of rank one. Its values must be positive or zero. \n\n | `PAD`     | (Optional) shall be an array of the same\ntype as `SOURCE`. \n\n | `ORDER`   | (Optional) shall be of type `INTEGER`and an array of the same shape as `SHAPE`. Its values shall\nbe a permutation of the numbers from 1 to n, where n is the size of\n`SHAPE`. If `ORDER` is absent, the natural ordering shall\nbe assumed.\n\n\n\n\n\n\n### Return value\nThe result is an array of shape `SHAPE` with the same type as\n`SOURCE`.\n\n\n\n### Example\n\n     ```\n\n\nPROGRAM test_reshape\n\n  INTEGER, DIMENSION(4) :: x\n\n  WRITE(*,*) SHAPE(x)                       ! prints \"4\"\n\n  WRITE(*,*) SHAPE(RESHAPE(x, (/2, 2/)))    ! prints \"2 2\"\n\nEND PROGRAM\n\n```\n\n\n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nTransformational function\n\n\n\n### See also\n<a href=\"SHAPE.html#SHAPE\">SHAPE</a>\n"}