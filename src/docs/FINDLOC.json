{
    "keyword":"FINDLOC",
    "docstr":"`FINDLOC` â€” Search an array for a value\n\n### Description\nDetermines the location of the element in the array with the value given in the VALUE argument, or, if the DIM argument is supplied, determines the locations of the maximum element along each row of the array in the DIM direction. If MASK is present, only the elements for which MASK is .TRUE. are considered. If more than one element in the array has the value VALUE, the location returned is that of the first such element in array element order if the BACK is not present or if it is .FALSE.. If BACK is true, the location returned is that of the last such element. If the array has zero size, or all of the elements of MASK are .FALSE., then the result is an array of zeroes. Similarly, if DIM is supplied and all of the elements of MASK along a given row are zero, the result value for that row is zero.\n### Standard\nFortran 2008 and later.\n### Class\nTransformational function\n### Syntax\nRESULT = FINDLOC(ARRAY, VALUE, DIM [, MASK] [,KIND] [,BACK])\nRESULT = FINDLOC(ARRAY, VALUE, [, MASK] [,KIND] [,BACK])\n### Arguments\n- ARRAY: Shall be an array of intrinsic type.\n- VALUE: A scalar of intrinsic type which is in type conformance with ARRAY.\n- DIM: (Optional) Shall be a scalar of type INTEGER, with a value between one and the rank of ARRAY, inclusive. It may not be an optional dummy argument.\n- KIND: (Optional) An INTEGER initialization expression indicating the kind parameter of the result.\n- BACK: (Optional) A scalar of type LOGICAL.\n### Return value\nIf DIM is absent, the result is a rank-one array with a length equal to the rank of ARRAY. If DIM is present, the result is an array with a rank one less than the rank of ARRAY, and a size corresponding to the size of ARRAY with the DIM dimension removed. If DIM is present and ARRAY has a rank of one, the result is a scalar. If the optional argument KIND is present, the result is an integer of kind KIND, otherwise it is of default kind.\n"
}