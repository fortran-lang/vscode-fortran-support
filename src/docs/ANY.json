{"keyword":"ANY","docstr":"`ANY` — Any value in `MASK` along `DIM` is true\n\n### Description\n`ANY(MASK [, DIM])` determines if any of the values in the logical array\n`MASK` along dimension `DIM` are `.TRUE.`.\n\n\n\n### Syntax\n`RESULT = ANY(MASK [, DIM])`\n\n\n### Arguments\n\n     \n and\nit shall not be scalar. \n\n | `DIM`   | (Optional) `DIM` shall be a scalar integer\nwith a value that lies between one and the rank of `MASK`.\n\n\n\n\n\n\n### Return value\n`ANY(MASK)` returns a scalar value of type `LOGICAL` where\nthe kind type parameter is the same as the kind type parameter of\n`MASK`.  If `DIM` is present, then `ANY(MASK, DIM)` returns\nan array with the rank of `MASK` minus 1.  The shape is determined from\nthe shape of `MASK` where the `DIM` dimension is elided.\n\n          <dl>\n**(A)** `ANY(MASK)` is true if any element of `MASK` is true;\notherwise, it is false.  It also is false if `MASK` has zero size. \n\n**(B)** If the rank of `MASK` is one, then `ANY(MASK,DIM)` is equivalent\nto `ANY(MASK)`.  If the rank is greater than one, then `ANY(MASK,DIM)`is determined by applying `ANY` to the array sections. \n\n</dl>\n\n\n\n### Example\n\n     ```\n\n\nprogram test_any\n\n  logical l\n\n  l = any((/.true., .true., .true./))\n\n  print *, l\n\n  call section\n\n  contains\n\n    subroutine section\n\n      integer a(2,3), b(2,3)\n\n      a = 1\n\n      b = 1\n\n      b(2,2) = 2\n\n      print *, any(a .eq. b, 1)\n\n      print *, any(a .eq. b, 2)\n\n    end subroutine section\n\nend program test_any\n\n```\n\n     \n\n### Standard\nFortran 95 and later\n\n\n\n### Class\nTransformational function\n\n\n"}