{"keyword":"MALLOC","docstr":"`MALLOC` — Allocate dynamic memory\n\n### Description\n`MALLOC(SIZE)` allocates `SIZE` bytes of dynamic memory and\nreturns the address of the allocated memory. The `MALLOC` intrinsic\nis an extension intended to be used with Cray pointers, and is provided\nin GNU Fortran to allow the user to compile legacy code. For new code\nusing Fortran 95 pointers, the memory allocation intrinsic is\n`ALLOCATE`.\n\n\n\n### Syntax\n`PTR = MALLOC(SIZE)`\n\n\n### Arguments\n\n     \n.\n\n\n\n\n\n\n### Return value\nThe return value is of type `INTEGER(K)`, with `K` such that\nvariables of type `INTEGER(K)` have the same size as\nC pointers (`sizeof(void *)`).\n\n\n\n### Example\nThe following example demonstrates the use of `MALLOC` and\n`FREE` with Cray pointers.\n\n     ```\n\n\nprogram test_malloc\n\n  implicit none\n\n  integer i\n\n  real*8 x(*), z\n\n  pointer(ptr_x,x)\n\n\n  ptr_x = malloc(20*8)\n\n  do i = 1, 20\n\n    x(i) = sqrt(1.0d0 / i)\n\n  end do\n\n  z = 0\n\n  do i = 1, 20\n\n    z = z + x(i)\n\n    print *, z\n\n  end do\n\n  call free(ptr_x)\n\nend program test_malloc\n\n```\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nFunction\n\n\n\n### See also\n<a href=\"FREE.html#FREE\">FREE</a>\n"}