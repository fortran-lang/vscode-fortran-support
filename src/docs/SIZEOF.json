{"keyword":"SIZEOF","docstr":"`SIZEOF` â€” Size in bytes of an expression\n\n### Description\n`SIZEOF(X)` calculates the number of bytes of storage the\nexpression `X` occupies.\n\n\n\n### Syntax\n`N = SIZEOF(X)`\n\n\n### Arguments\n\n     \n | `X`  | The argument shall be of any type, rank or shape.\n\n\n\n\n\n\n### Return value\nThe return value is of type integer and of the system-dependent kind\n`C_SIZE_T` (from the `ISO_C_BINDING` module). Its value is the\nnumber of bytes occupied by the argument.  If the argument has the\n`POINTER` attribute, the number of bytes of the storage area pointed\nto is returned.  If the argument is of a derived type with `POINTER`or `ALLOCATABLE` components, the return value does not account for\nthe sizes of the data pointed to by these components. If the argument is\npolymorphic, the size according to the dynamic type is returned. The argument\nmay not be a procedure or procedure pointer. Note that the code assumes for\narrays that those are contiguous; for contiguous arrays, it returns the\nstorage or an array element multiplied by the size of the array.\n\n\n\n### Example\n\n     ```\n\n\ninteger :: i\n\nreal :: r, s(5)\n\nprint *, (sizeof(s)/sizeof(r) == 5)\n\nend\n\n```\n\n     \nThe example will print `.TRUE.` unless you are using a platform\nwhere default `REAL` variables are unusually padded.\n\n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nInquiry function\n\n\n\n### See also\n<a href=\"C_005fSIZEOF.html#C_005fSIZEOF\">C_SIZEOF</a>, <a href=\"STORAGE_005fSIZE.html#STORAGE_005fSIZE\">STORAGE_SIZE</a>\n"}