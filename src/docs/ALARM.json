{"keyword":"ALARM","docstr":"`ALARM` — Execute a routine after a given delay\n\n### Description\n`ALARM(SECONDS, HANDLER [, STATUS])` causes external subroutine `HANDLER`\nto be executed after a delay of `SECONDS` by using `alarm(2)` to\nset up a signal and `signal(2)` to catch it. If `STATUS` is\nsupplied, it will be returned with the number of seconds remaining until\nany previously scheduled alarm was due to be delivered, or zero if there\nwas no previously scheduled alarm.\n\n\n\n### Syntax\n`CALL ALARM(SECONDS, HANDLER [, STATUS])`\n\n\n### Arguments\n\n     \n | `SECONDS`  | The type of the argument shall be a scalar\n`INTEGER`. It is `INTENT(IN)`. \n\n | `HANDLER`  | Signal handler (`INTEGER FUNCTION` or\n`SUBROUTINE`) or dummy/global `INTEGER` scalar. The scalar\nvalues may be either `SIG_IGN=1` to ignore the alarm generated\nor `SIG_DFL=0` to set the default action. It is `INTENT(IN)`. \n\n | `STATUS`   | (Optional) `STATUS` shall be a scalar\nvariable of the default `INTEGER` kind. It is `INTENT(OUT)`.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram test_alarm\n\n  external handler_print\n\n  integer i\n\n  call alarm (3, handler_print, i)\n\n  print *, i\n\n  call sleep(10)\n\nend program test_alarm\n\n```\n\n     \nThis will cause the external routine `handler_print` to be called\nafter 3 seconds. \n\n\n\n### Standard\nGNU extension\n\n\n\n### Class\nSubroutine\n\n\n"}