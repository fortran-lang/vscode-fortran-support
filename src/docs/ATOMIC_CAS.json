{"keyword":"ATOMIC_CAS","docstr":"`ATOMIC_CAS` — Atomic compare and swap\n\n### Description\n`ATOMIC_CAS` compares the variable `ATOM` with the value of\n`COMPARE`; if the value is the same, `ATOM` is set to the value\nof `NEW`. Additionally, `OLD` is set to the value of `ATOM`\nthat was used for the comparison.  When `STAT` is present and the invokation\nwas successful, it is assigned the value 0. If it is present and the invokation\nhas failed, it is assigned a positive value; in particular, for a coindexed\n`ATOM`, if the remote image has stopped, it is assigned the value of\n`ISO_FORTRAN_ENV`'s `STAT_STOPPED_IMAGE` and if the remote image has\nfailed, the value `STAT_FAILED_IMAGE`.\n\n\n\n### Syntax\n`CALL ATOMIC_CAS (ATOM, OLD, COMPARE, NEW [, STAT])`\n\n\n### Arguments\n\n     \n | `ATOM`     | Scalar coarray or coindexed variable of either integer\ntype with `ATOMIC_INT_KIND` kind or logical type with\n`ATOMIC_LOGICAL_KIND` kind. \n\n | `OLD`      | Scalar of the same type and kind as `ATOM`. \n\n | `COMPARE`  | Scalar variable of the same type and kind as\n`ATOM`. \n\n | `NEW`      | Scalar variable of the same type as `ATOM`. If kind\nis different, the value is converted to the kind of `ATOM`. \n\n | `STAT`     | (optional) Scalar default-kind integer variable.\n\n\n\n\n\n\n### Example\n\n     ```\n\n\nprogram atomic\n\n  use iso_fortran_env\n\n  logical(atomic_logical_kind) :: atom[*], prev\n\n  call atomic_cas (atom[1], prev, .false., .true.))\n\nend program atomic\n\n```\n\n\n\n### Standard\nTS 18508 or later\n\n\n\n### Class\nAtomic subroutine\n\n\n\n### See also\n<a href=\"ATOMIC_005fDEFINE.html#ATOMIC_005fDEFINE\">ATOMIC_DEFINE</a>, <a href=\"ATOMIC_005fREF.html#ATOMIC_005fREF\">ATOMIC_REF</a>, <a href=\"ISO_005fFORTRAN_005fENV.html#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a>\n"}